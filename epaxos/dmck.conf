# DMCK Additional Initial Timeout (ms)
#   Before the initial workload is injected,
#   DMCK waits additional timeout and then it will continue to DMCK Initial Timeout.
#   Default = 0ms
wait_before_workload_injection=4000

# DMCK Initial Timeout (ms)
#   In the beginning or when a node just restarted,
#   the DMCK will enable the first event after
#   this timeout in milliseconds is triggered which also means
#   all nodes has reached steady states or no node will change
#   its state if no event is enabled.
init_steady_state_timeout=4500

# DMCK Timeout Between Each Event Execution (ms)
#   After the first enabling event, the DMCK will enable
#   the next event after this timeout in milliseconds is triggered.
steady_state_timeout=100

# DMCK End Timeout (ms)
#   After there is no more events in queue, DMCK will wait for another
#   extra end timeout. 
wait_end_exploration=100

# DMCK Sequencer
#   If DMCK wants to quickly release events, DMCK needs to guarantee
#   that the target system nodes enable the event in DMCK ordered sequence.
#   Therefore, DMCK need to send receiver sequencer to target system nodes.
#   Default : false
use_sequencer=false

# DMCK Quick Event Release
#   Let DMCK to quickly release an event every time it sees that the
#   particular event has been executed in previous path execution,
#   therefore the event impact has been recorded before by the DMCK.
#   Instead of waiting for the real event impact (any new events to queue,
#   or global state updates) comes from the target system,
#   the DMCK uses the prior knowledge as the current event execution impact.
#   Default : false
quick_event_release=false

# DMCK Events Queueing Handling
#   If this is true, then DMCK will assume that the target system
#   uses TCP paradigm which also means that the DMCK will not queue
#   more than 1 message from node A to node B to the DMCK Queue.
#   Otherwise, DMCK allows more than 2 messages from node A to node B
#   in DMCK queue.
#   Default : true
tcp_paradigm=false

epaxos_path=/Users/srinidhi/go/src/github.com/epaxos
epaxos_log_path=/tmp/ipc/log